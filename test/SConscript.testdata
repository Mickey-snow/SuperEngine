# Prepare inputs for data-driven testing

import os
import random
import sys

Import('env')

#########################################################################

test_env = env.Clone()
test_env.Append(CPPPATH = ["#/test"])

#########################################################################

files_to_copy = [
  'ExpressionTest_SEEN/basicOperators.TXT',
  'ExpressionTest_SEEN/comparisonOperators.TXT',
  'ExpressionTest_SEEN/logicalOperators.TXT',
  'ExpressionTest_SEEN/previousErrors.TXT',
  'Gameexe_data/Gameexe.ini',
  'Gameexe_data/Gameexe_soundsys.ini',
  'Gameexe_data/Gameexe_tokenization.ini',
  'Gameexe_data/rl_filesystem.ini',
  'Gameroot/g00/doesntmatter.g00',
  'Gameroot/WAV/empty.wav',
  'Gameroot/BGM/BGM01.nwa',
  'Gameroot/BGM/BGM02.nwa',
  'Gameroot/BGM/BGM03.nwa',
  'Gameroot/BGM/BGM04.nwa',
  'Gameroot/BGM/BGM05.nwa',
  'Gameroot/BGM/BGM06.nwa',
  'Gameroot/BGM/BGM07.nwa',
  'Gameroot/data/clannad.cgm',
  'Gameroot/data/tomoyoafter.cgm',
  'Module_Jmp_SEEN/farcallTest_0.TXT',
  'Module_Jmp_SEEN/farcall_withTest.TXT',
  'Module_Jmp_SEEN/fibonacci.TXT',
  'Module_Jmp_SEEN/gosub_0.TXT',
  'Module_Jmp_SEEN/gosub_case_0.TXT',
  'Module_Jmp_SEEN/gosub_if_0.TXT',
  'Module_Jmp_SEEN/gosub_unless_0.TXT',
  'Module_Jmp_SEEN/gosub_with_0.TXT',
  'Module_Jmp_SEEN/goto_0.TXT',
  'Module_Jmp_SEEN/goto_case_0.TXT',
  'Module_Jmp_SEEN/goto_if_0.TXT',
  'Module_Jmp_SEEN/goto_on_0.TXT',
  'Module_Jmp_SEEN/goto_unless_0.TXT',
  'Module_Jmp_SEEN/graphics.TXT',
  'Module_Jmp_SEEN/graphics2.TXT',
  'Module_Jmp_SEEN/jumpTest.TXT',
  'Module_Jmp_SEEN/jump_0.TXT',
  'Module_Jmp_SEEN/pushStringValueUp.TXT',
  'Module_Mem_SEEN/cpyrng_0.TXT',
  'Module_Mem_SEEN/cpyvars_0.TXT',
  'Module_Mem_SEEN/setarray_0.TXT',
  'Module_Mem_SEEN/setarray_stepped_0.TXT',
  'Module_Mem_SEEN/setrng_0.TXT',
  'Module_Mem_SEEN/setrng_1.TXT',
  'Module_Mem_SEEN/setrng_stepped_0.TXT',
  'Module_Mem_SEEN/setrng_stepped_1.TXT',
  'Module_Mem_SEEN/sum_0.TXT',
  'Module_Mem_SEEN/sums_0.TXT',
  'Module_Str_SEEN/atoi_0.TXT',
  'Module_Str_SEEN/digit_0.TXT',
  'Module_Str_SEEN/digits_0.TXT',
  'Module_Str_SEEN/hantozen_0.TXT',
  'Module_Str_SEEN/hantozen_1.TXT',
  'Module_Str_SEEN/itoa_0.TXT',
  'Module_Str_SEEN/itoa_s_0.TXT',
  'Module_Str_SEEN/itoa_w_0.TXT',
  'Module_Str_SEEN/itoa_ws_0.TXT',
  'Module_Str_SEEN/lowercase_0.TXT',
  'Module_Str_SEEN/lowercase_1.TXT',
  'Module_Str_SEEN/strcat_0.TXT',
  'Module_Str_SEEN/strcharlen_0.TXT',
  'Module_Str_SEEN/strcharlen_1.TXT',
  'Module_Str_SEEN/strclear_0.TXT',
  'Module_Str_SEEN/strclear_1.TXT',
  'Module_Str_SEEN/strcmp_0.TXT',
  'Module_Str_SEEN/strcpy_0.TXT',
  'Module_Str_SEEN/strcpy_1.TXT',
  'Module_Str_SEEN/strlen_0.TXT',
  'Module_Str_SEEN/strlpos_0.TXT',
  'Module_Str_SEEN/strpos_0.TXT',
  'Module_Str_SEEN/strrsub_0.TXT',
  'Module_Str_SEEN/strrsub_1.TXT',
  'Module_Str_SEEN/strsub_0.TXT',
  'Module_Str_SEEN/strsub_1.TXT',
  'Module_Str_SEEN/strsub_2.TXT',
  'Module_Str_SEEN/strsub_3.TXT',
  'Module_Str_SEEN/strtrunc_0.TXT',
  'Module_Str_SEEN/strtrunc_1.TXT',
  'Module_Str_SEEN/strused_0.TXT',
  'Module_Str_SEEN/uppercase_0.TXT',
  'Module_Str_SEEN/uppercase_1.TXT',
  'Module_Str_SEEN/zentohan_0.TXT',
  'Module_Str_SEEN/zentohan_1.TXT',
  'Module_Sys_SEEN/SceneNum.TXT',
  'Module_Sys_SEEN/builtins.TXT',
  'Module_Sys_SEEN/dumb.TXT',
]

for file_name in files_to_copy:
  test_env.Command('#/build/test/' + file_name,
                   '#/test/' + file_name,
                   Copy('$TARGET', '$SOURCE'))

#########################################################################


def generate_testwav_action(target, source, env):
  target_path = str(target[0])
  target_file = target_path[target_path.rfind('/')+1:]
  script_path = str(source[0])
  param = env[f'WAV_PARAM'][target_file]
  env.Execute(f"{sys.executable} {script_path} {target_path} {param}")

wav_to_generate = list()
for sample_rate in [8000, 16000, 44100]:
  for channel in [1, 2]:
    for sample_width in [8, 16, 32]:
      file_name = f'test{len(wav_to_generate)}.wav'
      frequency = random.randint(100,8000)
      duration = random.random() + 0.1
      param = f'--frequency={frequency} --sample_rate={sample_rate} --channel={channel} '
      param += f'--sample_format={sample_width} --duration={duration:.2f}'
      wav_to_generate.append((file_name, param))

GenerateTestwav = Builder(action = generate_testwav_action)
test_env.Append(BUILDERS = {'GenerateTestwav' : GenerateTestwav})
test_env['WAV_PARAM'] = {f:param for f,param in wav_to_generate}

for file_name, param in wav_to_generate:
  target = f'#/build/test/Gameroot/WAV/{file_name}'
  source = '#/test/Gameroot/WAV/wav_generator.py'
  wav_out_target = test_env.GenerateTestwav(target, source)
  Depends('rlvm_unittests', wav_out_target)

#########################################################################


def generate_testogg_action(target, source, env):
  target_path = str(target[0])
  script_path = str(source[0])
  env.Execute(f"{sys.executable} {script_path} {target_path}")

GenerateTestogg = Builder(action = generate_testogg_action)
test_env.Append(BUILDERS = {'GenerateTestogg' : GenerateTestogg})
ogg_out_target = test_env.GenerateTestogg('#/build/test/Gameroot/OGG/test.ogg',
                                          '#/test/Gameroot/OGG/ogg_generator.py')
Depends('rlvm_unittests', ogg_out_target)
